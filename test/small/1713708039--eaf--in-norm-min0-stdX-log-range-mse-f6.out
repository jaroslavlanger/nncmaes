(3_w,6)-aCMA-ES (mu_w=2.0,w_1=63%) in dimension 2 (seed=1, Sun Apr 21 15:47:01 2024)
subset-idx-size=6
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=0.9999999999999999
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.9999999999999999
eval=1 | not-eval=5 | tau= 1.00 | n_kendall= 7 | std(means)/mean(stds)=  2.20 | std(means)=8.69e+04 | mean(stds)=3.94e+04
tau-population= 0.73
subset-idx-size=7
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=1.0
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.9999999999999999
eval=1 | not-eval=5 | tau= 0.93 | n_kendall= 8 | std(means)/mean(stds)=  0.65 | std(means)=3.59e+04 | mean(stds)=5.50e+04
tau-population= 0.20
subset-idx-size=6
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=0.9999999999999999
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.9047619047619049
eval=6 | not-eval=0 | tau= 0.60 | n_kendall=12 | std(means)/mean(stds)=  3.29 | std(means)=9.57e+04 | mean(stds)=2.91e+04
tau-population= 0.60
subset-idx-size=7
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=1.0
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.8181818181818182
eval=6 | not-eval=0 | tau=-0.11 | n_kendall=12 | std(means)/mean(stds)=  0.29 | std(means)=1.57e+02 | mean(stds)=5.44e+02
tau-population=-0.73
subset-idx-size=10
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=0.9999999999999999
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.9636363636363636
eval=1 | not-eval=5 | tau= 0.94 | n_kendall=12 | std(means)/mean(stds)=  1.89 | std(means)=5.23e+02 | mean(stds)=2.77e+02
tau-population= 0.20
subset-idx-size=7
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=1.0
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.1272727272727273
eval=6 | not-eval=0 | tau= 0.82 | n_kendall=12 | std(means)/mean(stds)=  3.70 | std(means)=4.92e+01 | mean(stds)=1.33e+01
tau-population= 0.87
subset-idx-size=9
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=0.9444444444444445
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.8909090909090909
eval=1 | not-eval=5 | tau= 0.91 | n_kendall=12 | std(means)/mean(stds)=  1.66 | std(means)=1.82e+01 | mean(stds)=1.10e+01
tau-population= 1.00
subset-idx-size=12
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) tau-train-ens=0.9636363636363636
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1487)__call__()
-> return surrogate_model
(Pdb) tau-archive=0.23636363636363636
eval=6 | not-eval=0 | tau=-0.20 | n_kendall=12 | std(means)/mean(stds)=  0.72 | std(means)=3.08e+02 | mean(stds)=4.29e+02
tau-population=-0.60
subset-idx-size=18
> /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1457)__call__()
-> x_test_scaled = (x_test - x_shift) / x_scale
(Pdb) > /home/jarda/Desktop/thesis/nncmaes/code/nncmaes.py(1365)__call__()
-> print("tau-train-ens={}".format(tau))
(Pdb) 0.2727272727272727
(Pdb) array([[3.04431785e+00],
       [5.65797406e-01],
       [3.49425936e-01],
       [6.92221486e-03],
       [2.19573945e+00],
       [5.79887696e-03],
       [9.08045337e-03],
       [7.81603351e-03],
       [7.81328164e-03],
       [6.05923947e-03],
       [5.77648948e-03],
       [2.18856245e-03],
       [5.09598717e-03],
       [3.56352352e-03],
       [2.61375695e-03],
       [1.16491936e-03],
       [4.62540568e-04],
       [0.00000000e+00]])
(Pdb) array([0.02281876, 0.03740992, 0.02450569, 0.06322326, 0.08727935,
       0.08361547, 0.04150194, 0.06271233, 0.04922903, 0.08613498,
       0.09996937, 0.3459272 , 0.03336428, 0.1335768 , 0.26184371,
       0.41838247, 0.25182766, 0.57191601])
(Pdb) array([[ 1.56054497e+00],
       [ 4.89449322e-01],
       [ 4.28718001e-01],
       [-2.06147209e-02],
       [ 1.66344976e+00],
       [ 5.48318997e-02],
       [-1.09779015e-02],
       [ 7.94787481e-02],
       [-2.40383521e-02],
       [-4.34424728e-03],
       [ 1.17585883e-02],
       [-1.74364001e-02],
       [-5.07797301e-02],
       [ 1.85466558e-03],
       [-8.18035007e-03],
       [-3.30018103e-02],
       [ 1.15461648e-04],
       [ 3.03862914e-02]], dtype=float32)
(Pdb) array([[-1.48377288e+00],
       [-7.63480840e-02],
       [ 7.92920651e-02],
       [-2.75369357e-02],
       [-5.32289685e-01],
       [ 4.90330227e-02],
       [-2.00583549e-02],
       [ 7.16627146e-02],
       [-3.18516337e-02],
       [-1.04034868e-02],
       [ 5.98209877e-03],
       [-1.96249625e-02],
       [-5.58757173e-02],
       [-1.70885795e-03],
       [-1.07941070e-02],
       [-3.41667297e-02],
       [-3.47078920e-04],
       [ 3.03862914e-02]])
(Pdb) array([[-3.38578519e-02, -5.55078284e-02, -3.63608733e-02,
        -9.38089590e-02, -1.29502740e-01, -1.24066371e-01,
        -6.15794534e-02, -9.30508558e-02, -7.30446934e-02,
        -1.27804750e-01, -1.48331845e-01, -5.13277397e-01,
        -4.95050205e-02, -1.98197638e-01, -3.88516599e-01,
        -6.20784560e-01, -3.73655046e-01, -8.48593470e-01],
       [-1.74216833e-03, -2.85617590e-03, -1.87096222e-03,
        -4.82697479e-03, -6.66361152e-03, -6.38388114e-03,
        -3.16859362e-03, -4.78796631e-03, -3.75854180e-03,
        -6.57624084e-03, -7.63247013e-03, -2.64108789e-02,
        -2.54729919e-03, -1.01983330e-02, -1.99912657e-02,
        -3.19426998e-02, -1.92265590e-02, -4.36646918e-02],
       [ 1.80934632e-03,  2.96631001e-03,  1.94310650e-03,
         5.01310287e-03,  6.92056029e-03,  6.63004351e-03,
         3.29077455e-03,  4.97259022e-03,  3.90347112e-03,
         6.82982060e-03,  7.92677808e-03,  2.74292820e-02,
         2.64552302e-03,  1.05915805e-02,  2.07621287e-02,
         3.31744099e-02,  1.99679348e-02,  4.53484017e-02],
       [-6.28358628e-04, -1.03015463e-03, -6.74811519e-04,
        -1.74097486e-03, -2.40340599e-03, -2.30251390e-03,
        -1.14283626e-03, -1.72690543e-03, -1.35561652e-03,
        -2.37189346e-03, -2.75285022e-03, -9.52577505e-03,
        -9.18750158e-04, -3.67829584e-03, -7.21037348e-03,
        -1.15209711e-02, -6.93456196e-03, -1.57488145e-02],
       [-1.21461887e-02, -1.99129159e-02, -1.30441242e-02,
        -3.36530893e-02, -4.64579004e-02, -4.45076537e-02,
        -2.20910547e-02, -3.33811269e-02, -2.62041026e-02,
        -4.58487624e-02, -5.32126664e-02, -1.84133480e-01,
        -1.77594645e-02, -7.11015544e-02, -1.39376707e-01,
        -2.22700672e-01, -1.34045263e-01, -3.04424994e-01],
       [ 1.11887260e-03,  1.83432158e-03,  1.20158789e-03,
         3.10002756e-03,  4.27957060e-03,  4.09991938e-03,
         2.03496558e-03,  3.07497515e-03,  2.41384794e-03,
         4.22345853e-03,  4.90180057e-03,  1.69618562e-02,
         1.63595172e-03,  6.54967441e-03,  1.28389887e-02,
         2.05145571e-02,  1.23478712e-02,  2.80427709e-02],
       [-4.57706714e-04, -7.50381501e-04, -4.91543760e-04,
        -1.26815459e-03, -1.75068028e-03, -1.67718883e-03,
        -8.32460646e-04, -1.25790619e-03, -9.87453270e-04,
        -1.72772604e-03, -2.00522117e-03, -6.93873052e-03,
        -6.69232659e-04, -2.67933092e-03, -5.25215410e-03,
        -8.39206402e-03, -5.05124848e-03, -1.14716943e-02],
       [ 1.63525403e-03,  2.68089660e-03,  1.75614403e-03,
         4.53075046e-03,  6.25467551e-03,  5.99211177e-03,
         2.97414170e-03,  4.49413587e-03,  3.52788563e-03,
         6.17266663e-03,  7.16407669e-03,  2.47900822e-02,
         2.39097520e-03,  9.57247631e-03,  1.87644312e-02,
         2.99824234e-02,  1.80466534e-02,  4.09850540e-02],
       [-7.26814670e-04, -1.19156715e-03, -7.80546155e-04,
        -2.01376413e-03, -2.77999004e-03, -2.66328941e-03,
        -1.32190460e-03, -1.99749019e-03, -1.56802490e-03,
        -2.74353989e-03, -3.18418787e-03, -1.10183464e-02,
        -1.06270697e-03, -4.25463940e-03, -8.34015001e-03,
        -1.33261651e-02, -8.02112224e-03, -1.82164594e-02],
       [-2.37394630e-04, -3.89193633e-04, -2.54944587e-04,
        -6.57742351e-04, -9.08009613e-04, -8.69892464e-04,
        -4.31764886e-04, -6.52426904e-04, -5.12153518e-04,
        -8.96104144e-04, -1.04003005e-03, -3.59884903e-03,
        -3.47104892e-04, -1.38966450e-03, -2.72408759e-03,
        -4.35263647e-03, -2.61988568e-03, -5.94992066e-03],
       [ 1.36504055e-04,  2.23789851e-04,  1.46595438e-04,
         3.78207788e-04,  5.22113722e-04,  5.00196017e-04,
         2.48268706e-04,  3.75151358e-04,  2.94492895e-04,
         5.15267970e-04,  5.98026667e-04,  2.06937067e-03,
         1.99588445e-04,  7.99069629e-04,  1.56637495e-03,
         2.50280525e-03,  1.50645791e-03,  3.42125808e-03],
       [-4.47817239e-04, -7.34168326e-04, -4.80923182e-04,
        -1.24075411e-03, -1.71285407e-03, -1.64095052e-03,
        -8.14474021e-04, -1.23072714e-03, -9.66117785e-04,
        -1.69039579e-03, -1.96189521e-03, -6.78880831e-03,
        -6.54772832e-04, -2.62143975e-03, -5.13867303e-03,
        -8.21074025e-03, -4.94210830e-03, -1.12238303e-02],
       [-1.27501438e-03, -2.09030625e-03, -1.36927282e-03,
        -3.53264502e-03, -4.87679656e-03, -4.67207452e-03,
        -2.31895068e-03, -3.50409647e-03, -2.75070713e-03,
        -4.81285390e-03, -5.58586045e-03, -1.93289304e-02,
        -1.86425333e-03, -7.46369967e-03, -1.46307052e-02,
        -2.33774205e-02, -1.40710509e-02, -3.19562174e-02],
       [-3.89940132e-05, -6.39282433e-05, -4.18767374e-05,
        -1.08039571e-04, -1.49148019e-04, -1.42886965e-04,
        -7.09209204e-05, -1.07166465e-04, -8.41254119e-05,
        -1.47192448e-04, -1.70833459e-04, -5.91140443e-04,
        -5.70148227e-05, -2.28263781e-04, -4.47453708e-04,
        -7.14956206e-04, -4.30337690e-04, -9.77323223e-04],
       [-2.46308098e-04, -4.03806706e-04, -2.64517004e-04,
        -6.82438637e-04, -9.42102697e-04, -9.02554361e-04,
        -4.47976384e-04, -6.76923611e-04, -5.31383372e-04,
        -9.29750212e-04, -1.07908012e-03, -3.73397521e-03,
        -3.60137657e-04, -1.44184230e-03, -2.82636905e-03,
        -4.51606513e-03, -2.71825466e-03, -6.17332264e-03],
       [-7.79642281e-04, -1.27817471e-03, -8.37279172e-04,
        -2.16013204e-03, -2.98205013e-03, -2.85686726e-03,
        -1.41798557e-03, -2.14267526e-03, -1.68199482e-03,
        -2.94295064e-03, -3.41562656e-03, -1.18192011e-02,
        -1.13994849e-03, -4.56388251e-03, -8.94634333e-03,
        -1.42947607e-02, -8.60412743e-03, -1.95404998e-02],
       [-7.91990933e-06, -1.29841955e-05, -8.50540726e-06,
        -2.19434609e-05, -3.02928243e-05, -2.90211680e-05,
        -1.44044486e-05, -2.17661281e-05, -1.70863571e-05,
        -2.98956365e-05, -3.46972622e-05, -1.20064039e-04,
        -1.15800398e-05, -4.63616925e-05, -9.08804329e-05,
        -1.45211735e-04, -8.74040707e-05, -1.98499992e-04],
       [ 6.93377382e-04,  1.13674881e-03,  7.44636937e-04,
         1.92112041e-03,  2.65209592e-03,  2.54076413e-03,
         1.26109005e-03,  1.90559516e-03,  1.49588753e-03,
         2.61732266e-03,  3.03769852e-03,  1.05114447e-02,
         1.01381687e-03,  4.05890366e-03,  7.95645935e-03,
         1.27130916e-02,  7.65210853e-03,  1.73784066e-02]])
(Pdb) array([[-3.38578519e-02],
       [-2.85617590e-03],
       [ 1.94310650e-03],
       [-1.74097486e-03],
       [-4.64579004e-02],
       [ 4.09991938e-03],
       [-8.32460646e-04],
       [ 4.49413587e-03],
       [-1.56802490e-03],
       [-8.96104144e-04],
       [ 5.98026667e-04],
       [-6.78880831e-03],
       [-1.86425333e-03],
       [-2.28263781e-04],
       [-2.82636905e-03],
       [-1.42947607e-02],
       [-8.74040707e-05],
       [ 1.73784066e-02]])
(Pdb) 1299 	    def __call__(
1300 	        self,
1301 	        *,
1302 	        x_train: NDArray[np.float64],
1303 	        y_train: NDArray[np.float64],
1304 	        x_test: NDArray[np.float64],
1305 	        weights: Optional[NDArray[np.float64]] = None,
1306 	    ):
1307 	        # lr=0.06
1308 	        # width=1024
1309 	        afs = [
1310 	            F.sigmoid,
1311 	            # F.hardsigmoid,
1312 	            F.relu,
1313 	            # F.softplus,
1314 	            # F.gelu,
1315 	            F.silu,
1316 	            # F.mish,
1317 	            # F.leaky_relu,
1318 	            # F.elu,
1319 	            # F.celu,
1320 	            # F.selu,
1321 	            # F.tanh,
1322 	            F.hardtanh,
1323 	            # F.softsign,
1324 	            torch.erf,
1325 	        ]
1326 	        dim = x_train.shape[-1]
1327 	        device = (
1328 	            "cuda"
1329 	            if torch.cuda.is_available()
1330 	            else "mps"
1331 	            if torch.backends.mps.is_available()
1332 	            else "cpu"
1333 	        )
1334 	        nets = {f.__name__: NeuralNetwork(f, width=self.width, dropout_p=.0, dim=dim).to(device) for f in afs}
1335 	
1336 	        # norms = np.linalg.norm(x_train - x_test.mean(axis=0), axis=1)
1337 	        # weights = (1 / (1 + norms))**2
1338 	        # weights = (1 / (1 + np.linalg.norm(x_train - x_test[0], axis=1)))**4
1339 	        # weights = (1 + np.linalg.norm(x_train - x_test[0], axis=1))**4
1340 	
1341 	        if weights is None:
1342 	            # Hansen's 20..1
1343 	            # weights = np.linspace(1, 20, y_train.shape[0])[:, None]
1344 	            weights = np.ones_like(y_train)
1345 	
1346 	        losses = {}
1347 	        for name, net in nets.items():
1348 	            losses[name] = train_network(net, x_train, y_train,
1349 	                                         weights=weights,
1350 	                                         epochs=self.epochs,
1351 	                                         mse_stop=self.mse_stop,
1352 	                                         lr=self.lr,
1353 	                                         device=device,
1354 	                                         )
1355 	
1356 	        if __debug__:
1357 	            with torch.no_grad():
1358 	                _max_model_size = max(x_test.shape[0], dim * (dim + 3) + 2)  # for kendall only
1359 	                _n_kendall_archive = _max_model_size - 1
1360 	                x = torch.Tensor(x_train[-_n_kendall_archive:]).to(device)
1361 	                y = np.array([net.eval()(x).cpu().numpy() for net in nets.values()])
1362 	                tau = kendalltau(y_train[-_n_kendall_archive:], np.mean(y, axis=0)).statistic  # pyright: ignore [reportOperatorIssue,reportPossiblyUnboundVariable]
1363 	                if tau < 0.7:
1364 	                    breakpoint()
1365 ->	                print("tau-train-ens={}".format(tau))
1366 	
1367 	        def eaf(x_test):
1368 	            x_test_tsr = torch.Tensor(x_test).to(device)
1369 	            y_preds = {}
1370 	            with torch.no_grad():
1371 	                for name, net in nets.items():
1372 	                    y_preds[name] = net.eval()(x_test_tsr).cpu().numpy()
1373 	
1374 	            # y_preds_scaled = {name: scale_y_back(y_) for name, y_ in y_preds.items()}
1375 	            y_pred_arr = np.array(list(y_preds.values()))
1376 	
1377 	            pred_mean = y_pred_arr.mean(axis=0)
1378 	            pred_std = y_pred_arr.std(axis=0)
1379 	
1380 	            if len(pred_mean) < len(x_test):
1381 	                raise ValueError("len(pred_mean) < len(x_test)")
1382 	            return Prediction(pred_mean, pred_std)
1383 	
1384 	        return eaf
(Pdb) array([[0.00781603],
       [0.00781328],
       [0.00605924],
       [0.00577649],
       [0.00218856],
       [0.00509599],
       [0.00356352],
       [0.00261376],
       [0.00116492],
       [0.00046254],
       [0.        ]])
(Pdb) array([[ 0.01909896],
       [ 0.00093194],
       [ 0.00162071],
       [ 0.0077229 ],
       [-0.00108811],
       [-0.01666949],
       [ 0.00726307],
       [ 0.00096949],
       [-0.00986647],
       [-0.00161749],
       [ 0.00739761]], dtype=float32)
(Pdb) array([[3.04431785e+00],
       [5.65797406e-01],
       [3.49425936e-01],
       [6.92221486e-03],
       [2.19573945e+00],
       [5.79887696e-03],
       [9.08045337e-03],
       [7.81603351e-03],
       [7.81328164e-03],
       [6.05923947e-03],
       [5.77648948e-03],
       [2.18856245e-03],
       [5.09598717e-03],
       [3.56352352e-03],
       [2.61375695e-03],
       [1.16491936e-03],
       [4.62540568e-04],
       [0.00000000e+00]])
(Pdb) 